////
/// @group types
////

/// Clamp `$number` between `$min` and `$max`
/// @author Hugo Giraudel
/// @access public
/// @param {Number} $number - Number to clamp
/// @param {Number} $min - Minimum value
/// @param {Number} $max - Maximum value
/// @return {Number}
/// @link https://css-tricks.com/snippets/sass/clamping-number/
@function clamp($number, $min, $max) {
  @return min(max($number, $min), $max);
}

/// toFixed() function in Sass
/// @author Hugo Giraudel
/// @access public
/// @param {Number} $float - Number to format
/// @param {Number} $digits [2] - Number of digits to leave
/// @return {Number}
/// @require {function} pow
/// @link https://css-tricks.com/snippets/sass/fix-number-n-digits/
@function to-fixed($float, $digits: 2) {
  $sass-precision: 5;

  @if $digits > $sass-precision {
    @warn "Sass sets default precision to #{$sass-precision} digits, and there is no way to change that for now."
    + "The returned number will have #{$sass-precision} digits, even if you asked for `#{$digits}`."
    + "See https://github.com/sass/sass/issues/1122 for further informations.";
  }

  $pow: pow(10, $digits);
  @return round($float * $pow) / $pow;
}

/// Power function
/// @author Hugo Giraudel
/// @access public
/// @param {Number} $x
/// @param {Number} $n
/// @return {Number}
/// @link https://css-tricks.com/snippets/sass/power-function/
@function pow($x, $n) {
  $ret: 1;

  @if $n >= 0 {
    @for $i from 1 through $n {
      $ret: $ret * $x;
    }
  } @else {
    @for $i from $n to 0 {
      $ret: $ret / $x;
    }
  }

  @return $ret;
}

/// Remove the unit of a length
/// @author Hugo Giraudel
/// @access public
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
/// @link https://css-tricks.com/snippets/sass/strip-unit-function/
@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}
